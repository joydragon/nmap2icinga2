/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  vars += config
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"

  check_command = "load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"

  assign where host.name == NodeName
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"

  assign where host.name == NodeName
}

apply Service "users" {
  import "generic-service"

  check_command = "users"

  assign where host.name == NodeName
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  groups = ["ssh", "remote-login"]
  assign where "22" in host.vars.ports
}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
}

apply Service "ftp" {
  import "generic-service"

  check_command = "ftp"

  groups = ["remote-file", "unsafe"]

  assign where "21" in host.vars.ports
}

apply Service "telnet" {
  import "generic-service"

  check_command = "tcp"

  groups = ["remote-login", "unsafe"]

  vars.tcp_port = "23"

  assign where "23" in host.vars.ports
}

apply Service "smtp" {
  import "generic-service"

  check_command = "smtp"

  assign where "25" in host.vars.ports
}

apply Service "mssql" {
  import "generic-service"

  #check_command = "mssql_health"
  check_command = "tcp"
  vars.tcp_port = "1433"

  groups = ["db"]

  assign where "1433" in host.vars.ports
}

apply Service "mysql" {
  import "generic-service"

  check_command = "mysql"

  groups = ["db"]


  vars.mysql_ignore_auth = true
  assign where "3306" in host.vars.ports
}

apply Service "dns" {
  import "generic-service"

  check_command = "dns"

  groups = ["dns"]

  vars.dns_lookup = "google-public-dns-a.google.com"
  vars.dns_server = host.address
  vars.dns_expected_answers = "8.8.8.8"

  assign where "53" in host.vars.ports
}

apply Service "termsrv" {
  import "generic-service"

  check_command = "x224"

  groups = ["remote-login"]

  assign where "3389" in host.vars.ports
}

apply Service "open-port-" for (port in host.vars.ports){
  import "generic-service"

  check_command = "tcp"
  vars.tcp_port = port

  ignore where number(port) > 40000
}
